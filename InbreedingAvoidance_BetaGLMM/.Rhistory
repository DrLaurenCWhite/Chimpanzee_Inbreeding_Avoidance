geom_line(alpha=0.5)  + ylim(c(0, TARGET)) +
guides(color = guide_legend(override.aes = list(lwd = 3, alpha=1) ) ) +
scale_color_viridis_d(labels=c("Shotgun","Capture\n1 round","Capture\n2 rounds")) +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12, color="black"),
legend.title = element_blank())
p2=ggplot(res2, aes(x=n, y=uniqueOnTarget, col=as.factor(Type), group=interaction(Run, Type))) +
xlab("Number of Reads Sequenced") + ylab("Unique Reads on Target") +
annotate("rect", xmin = 100, xmax = 3000, ymin = 0, ymax = TARGET, fill = "yellow", alpha = 0.2) +
annotate("rect", xmin = 3100, xmax = 10000, ymin = 0, ymax = TARGET, fill = "mediumturquoise", alpha = 0.2) +
annotate("rect", xmin = 10100, xmax = 20000, ymin = 0, ymax = TARGET, fill = "purple", alpha = 0.2) +
annotate("label", label="Capture Efficiency = 50%", x=17000, y=50, label.size=NA, fill="white", size=5) +
geom_line(alpha=0.5)  + ylim(c(0, TARGET)) +
guides(color = guide_legend(override.aes = list(lwd = 3, alpha=1) ) ) +
scale_color_viridis_d(labels=c("Shotgun","Capture\n1 round","Capture\n2 rounds")) +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12, color="black"),
legend.title = element_blank())
p3=ggplot(res3, aes(x=n, y=uniqueOnTarget, col=as.factor(Type), group=interaction(Run, Type))) +
xlab("Number of Reads Sequenced") + ylab("Unique Reads on Target") +
annotate("rect", xmin = 100, xmax =900, ymin = 0, ymax = TARGET, fill = "yellow", alpha = 0.2) +
annotate("rect", xmin = 1000, xmax = 4000, ymin = 0, ymax = TARGET, fill = "mediumturquoise", alpha = 0.2) +
annotate("rect", xmin = 4100, xmax = 20000, ymin = 0, ymax = TARGET, fill = "purple", alpha = 0.2) +
annotate("label", label="Capture Efficiency = 25%", x=17000, y=50, label.size=NA, fill="white", size=5) +
geom_line(alpha=0.5) + ylim(c(0, TARGET)) +
guides(color = guide_legend(override.aes = list(lwd = 3, alpha=1) ) ) +
scale_color_viridis_d(labels=c("Shotgun","Capture\n1 round","Capture\n2 rounds")) +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12, color="black"),
legend.title = element_blank())
fig=ggarrange(p3 + rremove("ylab") + rremove("xlab"), p2 + rremove("ylab") + rremove("xlab"), p1+ rremove("ylab") + rremove("xlab"),
nrow=3, common.legend = TRUE, legend="top")
annotate_figure(fig, left = text_grob("Unique reads on-target", rot=90),
bottom = text_grob("Number of reads sequenced"))
setwd("C:/Users/lw0y/Dropbox/DELWP led projects/Data")
library(data.table)
library(sf)
library(ggplot2)
library(dplyr)
data.dir="./"
load(file.path(data.dir, "capt_pop.rda"))
buffer=1500
# for discrete state space. input is an sf object
make_grid <- function(x, cell_diameter, cell_area, square= FALSE, clip = FALSE, offset=c(0,0)) {
if (missing(cell_diameter)) {
if (missing(cell_area)) {
stop("Must provide cell_diameter or cell_area")
} else {
cell_diameter <- sqrt(2 * cell_area / sqrt(3))
}
}
# generate array of hexagon centers
g <- st_make_grid(x, cellsize = cell_diameter, what="polygons", square=square, offset = offset)
# clip to boundary of study area
if (clip) {
g <- st_intersection(g, x)
}
g<- st_sf(HexID = 1:length(g), geometry=g)
return(g)
}
#Alpine
load(file.path(data.dir, "ANP2points.rda"))
searchPoints=ANP2points
nocc=2
GBForpoints<- as.data.frame(searchPoints@coords)
GBpoints<- st_as_sf(GBForpoints, coords=c("Longitude", "Latitude"), crs=32755)
sspace<- st_convex_hull(st_union(GBpoints))
sspace<- st_buffer(sspace, buffer)
Al_GBgrid<- make_grid(sspace, cell_diameter = 100, clip=TRUE)
capGB <- capt_pop[["Alpine"]]
capGB <- do.call(rbind, capGB)
if(nocc==2) {
capGB[, `5`:=NULL]
capGB[, `6`:=NULL]
}
capGB[, Treatment := factor(Treatment, levels = c("Pre_Control","Post_Control"))]
capGB<- st_as_sf(capGB, coords=c("Long","Lat"), crs=4326)
Al_capGB<- st_transform(capGB, crs=32755)
ggplot(Al_GBgrid) + geom_sf() + geom_sf(data=Al_capGB, col="red")
m <- read_sf("./Australian States Shapefile/States Map.shp")
ggplot(m) + geom_sf(Al_GBgrid) + geom_sf(data=Al_capGB, col="red")
ggplot(m) + geom_sf(data=Al_GBgrid) + geom_sf(data=Al_capGB, col="red")
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=Al_capGB, col="red")
ggplot() + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=Al_capGB, col="red") #+ xlim()
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=Al_capGB, col="red") +
xlim(c(146,148)) + ylim(c(-36, -38))
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=Al_capGB, col="red") +
xlim(c(146,148)) + ylim(c(-38, -36))
#Lake Tyers
load(file.path(data.dir, "LTpoints.rda"))
searchPoints=LTpoints
nocc=3
GBForpoints<- as.data.frame(searchPoints@coords)
GBpoints<- st_as_sf(GBForpoints, coords=c("Longitude", "Latitude"), crs=32755)
sspace<- st_convex_hull(st_union(GBpoints))
sspace<- st_buffer(sspace, buffer)
LT_GBgrid<- make_grid(sspace, cell_diameter = 100, clip=TRUE)
capGB <- capt_pop[["LakeTyers"]]
capGB <- do.call(rbind, capGB)
if(nocc==2) {
capGB[, `5`:=NULL]
capGB[, `6`:=NULL]
}
capGB[, Treatment := factor(Treatment, levels = c("Pre_Control","Post_Control"))]
capGB<- st_as_sf(capGB, coords=c("Long","Lat"), crs=4326)
LT_capGB<- st_transform(capGB, crs=32755)
LT_capGB = LT_capGB %>% filter(SampleID!="LT69")
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=LT_capGB, col="red")
ggplot() + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=LT_capGB, col="red")
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=Al_GBgrid) + geom_sf(data=LT_capGB, col="red") +
xlim(c(146, 150)) +ylim(c(-39, -37))
#Lake Tyers
load(file.path(data.dir, "LTpoints.rda"))
searchPoints=LTpoints
nocc=3
GBForpoints<- as.data.frame(searchPoints@coords)
GBpoints<- st_as_sf(GBForpoints, coords=c("Longitude", "Latitude"), crs=32755)
sspace<- st_convex_hull(st_union(GBpoints))
sspace<- st_buffer(sspace, buffer)
LT_GBgrid<- make_grid(sspace, cell_diameter = 100, clip=TRUE)
capGB <- capt_pop[["LakeTyers"]]
capGB <- do.call(rbind, capGB)
if(nocc==2) {
capGB[, `5`:=NULL]
capGB[, `6`:=NULL]
}
capGB[, Treatment := factor(Treatment, levels = c("Pre_Control","Post_Control"))]
capGB<- st_as_sf(capGB, coords=c("Long","Lat"), crs=4326)
LT_capGB<- st_transform(capGB, crs=32755)
LT_capGB = LT_capGB %>% filter(SampleID!="LT69")
ggplot(m) + geom_sf(fill=NA) + geom_sf(data=LT_GBgrid) + geom_sf(data=LT_capGB, col="red") +
xlim(c(146, 150)) +ylim(c(-39, -37))
setwd("C:/Users/lw0y/Dropbox/MyGitProjects/InbredingAvoidance/Relatedness_Validation")
rm(list=ls())
library(data.table)
library(ggplot2)
library(dplyr)
library(stringr)
library(ggpubr)
pairs=fread("RelatednessComparison_AllSNPS_SubsetMAF.csv")
View(pairs)
pairsLD=fread("RelatednessComparison_LDPrunedSNPS_SubsetMAF.csv")
pairsAF=fread("RelatednessComparison_AllSNPS_AllIndsMAF.csv")
pairsLDAF=fread("RelatednessComparison_LDPrunedSNPS_AllIndsMAF.csv")
#Compare SNP set and different MAF calclations
fit1 <- lm(GeneticR ~ PedigreeR, data = pairs)
summary(fit1) #p<<0.001 AdjustedR^2=0.95.8
fit2 <- lm(GeneticR ~ PedigreeR, data = pairsLD)
summary(fit2) #pvalue=<<0.001 adjusted R^2=0.95.6
fit3 <- lm(GeneticR ~ PedigreeR, data = pairsAF)
summary(fit3) #pvalue=<<0.001 adjusted R^2=0.95.6
fit4 <- lm(GeneticR ~ PedigreeR, data = pairsLDAF)
summary(fit4) #pvalue=<<0.001 adjusted R^2=0.95.8
#Compare depth of coverage cutoffs
#Sample sizes
nrow(pairs)
nrow(pairs[AvDepth.a>=8 & AvDepth.b>=8])
nrow(pairs[AvDepth.a>=12 & AvDepth.b>=12])
nrow(pairs[AvDepth.a>=16 & AvDepth.b>=16])
fitq1 <- lm(GeneticR ~ PedigreeR, data = pairs) #Same as fit1
summary(fitq1) #p<<0.001 AdjustedR^2=0.95.8
fitq2 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=8 & AvDepth.b>=8])
summary(fitq2) #pvalue=<<0.001 adjusted R^2=0.95.6
fitq3 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=12 & AvDepth.b>=12])
summary(fitq3) #pvalue=<<0.001 adjusted R^2=0.95.1
fitq4 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=16 & AvDepth.b>=16])
summary(fitq4) #pvalue=<<0.001 adjusted R^2=0.95.2
#Plot comparisons of SNP set and different MAF calclations
#red line is 1:1, blue line is linear regression/correlation. adjusted R^2=0.9577
p1=ggplot(pairs, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Entire SNP set\nMAF calculated from subset", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p2=ggplot(pairsLD, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="LD pruned SNP set\nMAF calculated from subset", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p3=ggplot(pairsAF, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="Entire SNP set\nMAF calculated from entire sample", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p4=ggplot(pairsLDAF, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="LD pruned SNP set\nMAF calculated from entire sample", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
ggarrange(p1, p2, p3, p4)
rm(list = ls())
library(data.table)
library(rethinking)
#import and format data
D=fread("./InbAvd_Input.csv")
setwd("C:/Users/lw0y/Dropbox/MyGitProjects/InbredingAvoidance/InbreedingAvoidance_BetaGLMM")
#import and format data
D=fread("./InbAvd_Input.csv")
View(D)
#Remove data point(s) in which sire only occurs once (not usable with unidirectional indexing)
D[Male %in% D[,.N, by=Male][N<=1]$Male] #There are none here
#For unidirectional indexing, each individual needs to occur at least once in each column:
D$idA=as.character()
D$idB=as.character()
set.seed(42)
for (i in 1:nrow(D)){
ida=sample(c(D[i,]$Male, D[i,]$Female), 1)
idb=ifelse(ida==D[i,]$Male, D[i,]$Female, D[i,]$Male)
D[i,]$idA=ida
D[i,]$idB=idb
}
#Check that worked. The below should be empty data tables. (Run the for loop again if not)
D[!idA %in% idB]
D[!idB %in% idA]
#Sample sizes
D[, .N] #data points
D[, .N, by=Actual] #By parent status (actual(true) or potential(false))
D[Actual==TRUE, .N, by=F.ImmiOrNatal] #By female natality status
D[Actual==FALSE, .N, by=F.ImmiOrNatal] #By female natality status
dat=list(
rel=D$GeneticR+0.00001,
sire=ifelse(D$Actual==TRUE, 1, 0),
Nat_I=ifelse(D$F.ImmiOrNatal=="Immigrant",1,0),
Nat_U=ifelse(D$F.ImmiOrNatal=="Unknown",1,0),
ida_index=as.integer(as.factor(D$idA)),
idb_index=as.integer(as.factor(D$idB)),
off_id=as.integer(as.factor(D$Offspring))
)
#Fit model
InbAvd=map2stan(
alist(
rel ~ dbeta2(p, theta),
logit(p) <- alpha + bs*sire + #fixed effects and intercept
bnI*Nat_I + bsXnI*sire*Nat_I +
bnU*Nat_U + bsXnU*sire*Nat_U +
alpha_id[ida_index] + alpha_id[idb_index] + alpha_off[off_id] + #varying intercepts
bs_id[ida_index]*sire +
bnI_id[ida_index]*Nat_I + bsXnI_id[ida_index]*Nat_I*sire + #varying slopes
bnU_id[ida_index]*Nat_U + bsXnU_id[ida_index]*Nat_U*sire +
bs_id[idb_index]*sire +
bnI_id[idb_index]*Nat_I + bsXnI_id[idb_index]*Nat_I*sire + #varying slopes
bnU_id[idb_index]*Nat_U + bsXnU_id[idb_index]*Nat_U*sire +
bs_off[off_id]*sire +
bnI_off[off_id]*Nat_I + bsXnI_off[off_id]*Nat_I*sire + #varying slopes
bnU_off[off_id]*Nat_U + bsXnU_off[off_id]*Nat_U*sire,
c(alpha_id, bs_id, bnI_id, bsXnI_id, bnU_id, bsXnU_id)[ida_index] ~ dmvnormNC(sigma_id, Rho_id),
Rho_id ~ dlkjcorr(3),
sigma_id ~ dcauchy(0,2),
c(alpha_off, bs_off, bnI_off, bsXnI_off, bnU_off, bsXnU_off)[off_id] ~ dmvnormNC(sigma_off, Rho_off),
Rho_off ~ dlkjcorr(3),
sigma_off ~ dcauchy(0,2),
c(alpha,bs,bnI,bsXnI, bnU, bsXnU) ~ normal(0,1.5),
theta ~ dcauchy ( 2, 1 )
), data=dat, cores=2, iter=2000, chains=2
)
#If you do not want to fit the model, load it from this object file:
load("InbAvd_ModelObject.rdata")
#Fixed effects coefficients, number of effective samples and R-hat
precis(InbAvd) #R-hat and n_eff look fine
#Fixed effects+varying effects coefficients, number of effective samples and R-hat
precis(InbAvd, depth=3) #almost all of R-hat and n_eff are fine, some varying effects are fit poorly, but should be OK
#Dummy code set up for natality:
#Nat_I==0 & Nat_U==0 <-intercept=Natal females
#Nat_I==1 & Nat_U==0 <-intercept+Nat_I = Immigrant females
#Nat_I==0 & Nat_U==1 <-intercept+Nat_U = Unknown females
pred=list(
sire=c(0,1,0,1,0,1),
Nat_I=c(0,0,1,1,0,0),
Nat_U=c(0,0,0,0,1,1),
ida_index=c(1,1,1,1,1,1),
idb_index=c(1,1,1,1,1,1),
off_id=c(1,1,1,1,1,1)
)
a_id <- matrix(0,1000,length(unique(dat$ida_index)))
of_id <- matrix(0,1000,length(unique(dat$off_id)))
P=link(InbAvd,data=pred,n=1000,
replace=list(alpha_id=a_id,bs_id=a_id, bnI_id=a_id, bsXnI_id=a_id, bnU_id=a_id, bsXnU_id=a_id,
alpha_off=of_id, bs_off=of_id, bnI_off=of_id, bsXnI_off=of_id, bnU_off=of_id, bsXnU_off=of_id))
round(median(P[,1]), 3) #natal potential
round(HPDI(P[,1]), 3) #natal potential
round(median(P[,2]), 3) #natal actual
round(HPDI(P[,2]), 3) #natal actual
round(median(P[,3]), 3) #immigrant potential
round(HPDI(P[,3]), 3) #immigrant potential
round(median(P[,4]), 3) #immigrant actual
round(HPDI(P[,4]), 3) #immigrant actual
round(median(P[,5]), 3) #unknown potential
round(HPDI(P[,5]), 3) #unknown potential
round(median(P[,6]), 3) #unknown actual
round(HPDI(P[,6]), 3) #unknown actual
library(ggplot2)
library(data.table)
library(rethinking)
library(ggpubr)
#Import and format data
D=fread("./InbAvd_Input.csv")
#Remove data point(s) in which sire only occurs once (not usable with unidirectional indexing)
D[Male %in% D[,.N, by=Male][N<=1]$Male] #There are none here
#For unidirectional indexing, each individual needs to occur at least once in each column:
D$idA=as.character()
D$idB=as.character()
set.seed(42)
for (i in 1:nrow(D)){
ida=sample(c(D[i,]$Male, D[i,]$Female), 1)
idb=ifelse(ida==D[i,]$Male, D[i,]$Female, D[i,]$Male)
D[i,]$idA=ida
D[i,]$idB=idb
}
#Check that worked. The below should be empty data tables. (Run the for loop again if not)
D[!idA %in% idB]
D[!idB %in% idA]
#Sample sizes
D[, .N] #data points
D[, .N, by=Actual] #By parent status (actual(true) or potential(false))
D[Actual==TRUE, .N, by=F.ImmiOrNatal] #By female natality status
D[Actual==FALSE, .N, by=F.ImmiOrNatal] #By female natality status
#Plot the raw data
D[is.na(PedigreeCategory), PedigreeCategory:="Unknown"]
D$PedigreeCategory <- factor(D$PedigreeCategory, levels = c("PO", "HS", "HPN", "Unknown"))
D$F.ImmiOrNatal <- factor(D$F.ImmiOrNatal , levels = c("Natal", "Immigrant", "Unknown"))
ggplot(D, aes(x=Actual, y=GeneticR+0.00001)) + geom_jitter(aes(col=PedigreeCategory, alpha=PedigreeCategory), size=2, width=0.3) +
facet_grid(.~F.ImmiOrNatal) +
ylab("Genetic Relatedness") + scale_x_discrete(labels=c("TRUE"="Actual\n", "FALSE"="Potential\n")) +
scale_color_manual(name = "Pedigree\nCategory",
values=c("#CC79A7", "#E69F00",  "#009E73", "#999999"),
labels = c("Parent-Offspring", "Half Siblings",  "Half Avuncular", "Unknown")) +
scale_alpha_manual(values = c(1, 1,1, 0.4)) + guides(alpha=FALSE) +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=12),
axis.text.x = element_text(size=12, color="black"),
axis.title.x = element_blank(),
axis.title = element_text(size=15),
legend.text = element_text(size=12, color="black"),
legend.title = element_blank(),
strip.text = element_text(size=15, colour="black"))
#Load model
load("InbAvd_ModelObject.rdata")
dat=list(
rel=D$GeneticR+0.00001,
sire=ifelse(D$Actual==TRUE, 1, 0),
Nat_I=ifelse(D$F.ImmiOrNatal=="Immigrant",1,0),
Nat_U=ifelse(D$F.ImmiOrNatal=="Unknown",1,0),
ida_index=as.integer(as.factor(D$idA)),
idb_index=as.integer(as.factor(D$idB)),
off_id=as.integer(as.factor(D$Offspring))
)
#zeros for varying effects to just plot main effect
a_id <- matrix(0,1000,length(unique(dat$ida_index)))
of_id <- matrix(0,1000,length(unique(dat$off_id)))
#Dummy code set up for natality:
#Nat_I==0 & Nat_U==0 <-intercept=Natal females
#Nat_I==1 & Nat_U==0 <-intercept+Nat_I = Immigrant females
#Nat_I==0 & Nat_U==1 <-intercept+Nat_U = Unknown females
pred=list(
sire=c(0,1,0,1,0,1),
Nat_I=c(0,0,1,1,0,0),
Nat_U=c(0,0,0,0,1,1),
ida_index=c(1,1,1,1,1,1),
idb_index=c(1,1,1,1,1,1),
off_id=c(1,1,1,1,1,1)
)
P=link(InbAvd,data=pred,n=1000,
replace=list(alpha_id=a_id,bs_id=a_id, bnI_id=a_id, bsXnI_id=a_id, bnU_id=a_id, bsXnU_id=a_id,
alpha_off=of_id, bs_off=of_id, bnI_off=of_id, bsXnI_off=of_id, bnU_off=of_id, bsXnU_off=of_id))
#Plot poster distributions with parent-type seperately -> This is the version presented in the paper
par(mfrow=c(2,1), mar=c(2,2,0.5,0.5), oma=c(2,0,0,0))
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.1,at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=2,line=0,cex=1.1,text="Density - Potential Parents")
shade( density(P[,1]) , lim= as.vector(HPDI(P[,1], prob=0.999999)) , col = col.alpha("orange", 0.5)) #Natal potential
shade( density(P[,3]) , lim= as.vector(HPDI(P[,3], prob=0.999999)) , col = col.alpha("cyan3", 0.5)) #Immigrant potential
shade( density(P[,5]) , lim= as.vector(HPDI(P[,5], prob=0.999999)) , col = col.alpha("red", 0.5)) #Unknown potential
abline(v=median(P[,1]) , lty=1,lwd=1.5)
abline(v=median(P[,3]) , lty=2,lwd=1.5)
abline(v=median(P[,5]) , lty=3,lwd=1.5)
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.1,at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=2,line=0,cex=1.1,text="Density - Actual Parents")
shade( density(P[,2]) , lim= as.vector(HPDI(P[,2], prob=0.999999)) , col = col.alpha("orange", 0.5)) #Natal actual
shade( density(P[,4]) , lim= as.vector(HPDI(P[,4], prob=0.999999)) , col = col.alpha("cyan3", 0.5)) #immigrant actual
shade( density(P[,6]) , lim= as.vector(HPDI(P[,6], prob=0.999999)) , col = col.alpha("red", 0.5)) #unknown actual
abline(v=median(P[,2]) , lty=1,lwd=1.5)
abline(v=median(P[,4]) , lty=2,lwd=1.5)
abline(v=median(P[,6]) , lty=3,lwd=1.5)
legend(x=0.022,y=400, legend = c("Natal", "Immigrant", "Unknown"),
col=c(col.alpha("orange", 0.5), col.alpha("cyan3", 0.5), col.alpha("red", 0.5)) ,
pch=c(15,15,15),
pt.cex=c(5,5,5) , bty="n", y.intersp=2,x.intersp=0.4, lty=c(0,0,0) ,cex=1.1, lwd=c(1,1))
legend(x=0.022,y=400, legend = c("","",""),
col=1 , pch=c(NA,NA, NA),
pt.cex=c(5,5,5), bty="n",y.intersp=2,x.intersp=0.4, lty=c(1,2,3) ,cex=1.1, lwd=c(1,1))
mtext(side=1,line=0,cex=1.1,text="Relatedness", outer=TRUE)
#Plot poster distributions with natality-type seperately
par(mfrow=c(3,1), mar=c(2,2,0.5,0.5), oma=c(2,0,0,0))
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.3, at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=2,line=0,cex=1.1,text="Density - Natal Females")
shade( density(P[,1]) , lim= as.vector(HPDI(P[,1], prob=0.999999)) , col = col.alpha("forestgreen", 0.5)) #Natal potential
shade( density(P[,2]) , lim= as.vector(HPDI(P[,2], prob=0.999999)) , col = col.alpha("purple", 0.5)) #Natal actual
abline(v=median(P[,1]) , lty=1,lwd=1.5)
abline(v=median(P[,2]) , lty=2,lwd=1.5)
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.3, at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=2,line=0,cex=1.1,text="Density - Immigrant Females")
shade( density(P[,3]) , lim= as.vector(HPDI(P[,3], prob=0.999999)) , col = col.alpha("forestgreen", 0.5)) #Immigrant potential
shade( density(P[,4]) , lim= as.vector(HPDI(P[,4], prob=0.999999)) , col = col.alpha("purple", 0.5)) #immigrant actual
abline(v=median(P[,3]) , lty=1,lwd=1.5)
abline(v=median(P[,4]) , lty=2,lwd=1.5)
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.3, at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=2,line=0,cex=1.1,text="Density - Unknown Females")
shade( density(P[,5]) , lim= as.vector(HPDI(P[,5], prob=0.999999)) , col = col.alpha("forestgreen", 0.5)) #unknown potential
shade( density(P[,6]) , lim= as.vector(HPDI(P[,6], prob=0.999999)) , col = col.alpha("purple", 0.5)) #unknown actual
abline(v=median(P[,5]) , lty=1,lwd=1.5)
abline(v=median(P[,6]) , lty=2,lwd=1.5)
legend(x=0.023,y=350, legend = c("Actual", "Potential"),
col=c(col.alpha("purple", 0.5), col.alpha("forestgreen", 0.5)),
pch=c(15,15), pt.cex=c(5,5) ,
bty="n", y.intersp=1,x.intersp=0.4, lty=c(0,0,0) ,cex=2, lwd=c(1,1))
legend(x=0.023,y=350, legend = c("",""),
col=1 , pch=c(NA,NA), pt.cex=c(5,5),
bty="n",y.intersp=1,x.intersp=0.4, lty=c(2, 1) ,cex=2, lwd=c(1,1))
mtext(side=1,line=0.9,cex=1.1,text="Relatedness", outer=TRUE)
#Plot poster distributions all on one plot
par(mfrow=c(1,2), mar=c(4,2,0.5,0), oma=c(0,0,0,0))
layout(mat=matrix(c(1,1,2), ncol=3, nrow=1))
dens(P[,1], xlim=c(0.005,0.03) , xlab=NA , ylab=NA , col="white"  , xaxt='n' ,  yaxt='n', zero.line = FALSE,
ylim=c(-11,400),mar=c(0,0,0,0), frame.plot=FALSE)
axis(1, cex=1,labels=NA, at=seq(0.005,0.03,by=0.005))
axis(1, cex.axis=1.5,at=seq(0.005,0.03,by=0.005),labels=seq(0.005,0.03,by=0.005),line=0.4,col=NA)
mtext(side=1,line=2.5,cex=1.1,text="Relatedness")
mtext(side=2,line=0,cex=1.1,text="Density")
shade( density(P[,1]) , lim= as.vector(HPDI(P[,1], prob=0.999999)) , col = col.alpha("orange", 0.5)) #Natal potential
shade( density(P[,2]) , lim= as.vector(HPDI(P[,2], prob=0.999999)) , col = col.alpha("cyan3", 0.5)) #Natal actual
shade( density(P[,3]) , lim= as.vector(HPDI(P[,3], prob=0.999999)) , col = col.alpha("red", 0.5)) #Immigrant potential
shade( density(P[,4]) , lim= as.vector(HPDI(P[,4], prob=0.999999)) , col = col.alpha("slateblue", 0.5)) #immigrant actual
shade( density(P[,5]) , lim= as.vector(HPDI(P[,5], prob=0.999999)) , col = col.alpha("forestgreen", 0.5)) #unknown potential
shade( density(P[,6]) , lim= as.vector(HPDI(P[,6], prob=0.999999)) , col = col.alpha("deeppink", 0.5)) #unknown actual
abline(v=median(P[,1]) , lty=1,lwd=1.5)
abline(v=median(P[,2]) , lty=2,lwd=1.5)
abline(v=median(P[,3]) , lty=3,lwd=1.5)
abline(v=median(P[,4]) , lty=4,lwd=1.5)
abline(v=median(P[,5]) , lty=5,lwd=1.5)
abline(v=median(P[,6]) , lty=6,lwd=1.5)
par(mar=c(0, 0 ,0, 0))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 10), ylim=c(0, 10),
xaxt='n' ,yaxt='n', frame.plot=FALSE)
legend(x=0,y=10, legend = c("Natal - Potential","Natal - Actual","Immigrant - Potential","Immigrant - Actual", "Unknown - Potential", "Unknown - Actual"),
col=c(col.alpha("orange", 0.5) ,col.alpha("cyan3", 0.5) ,col.alpha("red", 0.5),col.alpha("slateblue", 0.5),col.alpha("forestgreen", 0.5),col.alpha("deeppink", 0.5)) ,
pch=c(15,15,15,15,15,15),
pt.cex=c(5,5,5,5,5,5) , bty="n", y.intersp=1.5,x.intersp=0.2, lty=c(0,0,0,0) ,cex=1.6,lwd=c(1,1))
legend(x=0,y=10, legend = c("","","","", "",""),
col=1 , pch=c(NA,NA),
pt.cex=c(2,2,2,2,2,2) , bty="n",y.intersp=1.5,x.intersp=0.2, lty=c(1,2,3,4,5,6) ,cex=1.6,lwd=c(1,1))
