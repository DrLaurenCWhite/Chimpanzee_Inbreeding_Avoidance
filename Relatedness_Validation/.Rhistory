alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_ml=link(Assc, data=pred_ml, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_mh=link(Assc, data=pred_mh, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_mm=link(Assc, data=pred_mm, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
P_gl <- (1-link_gl$p)*link_gl$mu
P_gm <- (1-link_gm$p)*link_gm$mu
P_gh <- (1-link_gh$p)*link_gh$mu
P_ml <- (1-link_ml$p)*link_ml$mu
P_mm <- (1-link_mm$p)*link_mm$mu
P_mh <- (1-link_mh$p)*link_mh$mu
median(P_gl)
median(P_ml)
median(P_gm)
median(P_mm)
median(P_gh)
median(P_mh)
#Plot raw data
datPLOT=as.data.frame(dat)
ggplot(datPLOT, aes(x=rabplot, y=Ass, col=as.factor(Focal))) + geom_point(size=2, alpha=0.5) +
ylab("Male-female association index\n") + xlab("\nRelatedness to the natal female") +
guides(col = guide_legend(override.aes = list(size = 3, alpha = 1, arrow = NULL))) +
scale_color_manual(values=c("red", "blue"), name="", labels=c("Pre-reproductive\n(Association to natal female's mother)\n", "Reproductive\n(Association to natal female)\n")) +
theme(axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
legend.position = c(0.68, 0.85),
legend.background = element_rect(fill=NA),
legend.key = element_rect(color=NA, fill=NA),
#legend.key = element_rect(fill="white"),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.border = element_rect(color="black", fill=NA),
panel.grid.major = element_line(colour="#f0f0f0"))
dat=list(
rab=(scale(D$GeneticR)),
rabplot=D$GeneticR,
Ass=as.numeric(D$Association),
Focal=as.integer(ifelse(D$Association.Focal=="NatalFemale", 1, 0)),
off_id=as.integer(as.factor(D$Offspring)),
ida_index=as.integer(as.factor(D$IndA)),
idb_index=as.integer(as.factor(D$IndB)),
OFF=D$Offspring
)
#Plot raw data
datPLOT=as.data.frame(dat)
ggplot(datPLOT, aes(x=rabplot, y=Ass, col=as.factor(Focal))) + geom_point(size=2, alpha=0.5) +
ylab("Male-female association index\n") + xlab("\nRelatedness to the natal female") +
guides(col = guide_legend(override.aes = list(size = 3, alpha = 1, arrow = NULL))) +
scale_color_manual(values=c("red", "blue"), name="", labels=c("Pre-reproductive\n(Association to natal female's mother)\n", "Reproductive\n(Association to natal female)\n")) +
theme(axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
legend.position = c(0.68, 0.85),
legend.background = element_rect(fill=NA),
legend.key = element_rect(color=NA, fill=NA),
#legend.key = element_rect(fill="white"),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.border = element_rect(color="black", fill=NA),
panel.grid.major = element_line(colour="#f0f0f0"))
rm(list = ls())
library(ggplot2)
D=fread("./Assc_Input.csv")
#Remove data point(s) in which sire only occurs once (not usable with unidirectional indexing)
D[Male %in% D[,.N, by=Male][N<=1]$Male] #none here
D$IndA=as.character()
D$IndB=as.character()
set.seed(1989)
for (i in 1:nrow(D)){
ida=sample(c(D[i,]$Male, D[i,]$Female), 1)
idb=ifelse(ida==D[i,]$Male, D[i,]$Female, D[i,]$Male)
D[i,]$IndA=ida
D[i,]$IndB=idb
}
#Check that worked. The below should be empty data tables. (Run the for loop again if not)
D[!IndA %in% IndB]
D[!IndB %in% IndA]
dat=list(
rab=(scale(D$GeneticR)),
rabplot=D$GeneticR,
Ass=as.numeric(D$Association),
Focal=as.integer(ifelse(D$Association.Focal=="NatalFemale", 1, 0)),
off_id=as.integer(as.factor(D$Offspring)),
ida_index=as.integer(as.factor(D$IndA)),
idb_index=as.integer(as.factor(D$IndB)),
OFF=D$Offspring
)
#Plot raw data
datPLOT=as.data.frame(dat)
ggplot(datPLOT, aes(x=rabplot, y=Ass, col=as.factor(Focal))) + geom_point(size=2, alpha=0.5) +
ylab("Male-female association index\n") + xlab("\nRelatedness to the natal female") +
guides(col = guide_legend(override.aes = list(size = 3, alpha = 1, arrow = NULL))) +
scale_color_manual(values=c("red", "blue"), name="", labels=c("Pre-reproductive\n(Association to natal female's mother)\n", "Reproductive\n(Association to natal female)\n")) +
theme(axis.text = element_text(size=12, color="black"),
axis.title = element_text(size=15),
legend.text = element_text(size=12),
legend.title = element_text(size=12),
legend.position = c(0.68, 0.85),
legend.background = element_rect(fill=NA),
legend.key = element_rect(color=NA, fill=NA),
#legend.key = element_rect(fill="white"),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.border = element_rect(color="black", fill=NA),
panel.grid.major = element_line(colour="#f0f0f0"))
#load model
load("Assc_ModelObject.rdata")
#Extract model predictions
#zeros for varying effects to just plot main effect
of_id <- matrix(0,1000,length(unique(dat$off_id)))
a_id <- matrix(0,1000,length(unique(dat$ida_index)))
pred_Gma=data.frame(rab=seq(from=min(dat$rab), to=max(dat$rab), length.out=1000),
Focal=rep(0, 1000),
ida_index=rep(1, 1000),
idb_index=rep(1, 1000),
off_id=rep(1, 1000))
pred_Mum=data.frame(rab=seq(from=min(dat$rab), to=max(dat$rab), length.out=1000),
Focal=rep(1, 1000),
ida_index=rep(1, 1000),
idb_index=rep(1, 1000),
off_id=rep(1, 1000))
link_mum=link(Assc, data=pred_Mum, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_gma=link(Assc, data=pred_Gma, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
P_Mum <- (1-link_mum$p)*link_mum$mu
P_Gma <- (1-link_gma$p)*link_gma$mu
#Plot
rabseq=seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000)
yy_gma=as.vector(t(P_Gma[1:100,]))
yy_mum=as.vector(t(P_Mum[1:100,]))
plot(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000), med_mum,type='n',ylim=c(0,3), xlab=NA , ylab=NA )
med_mum=apply(P_Mum, 2, median)
med_gma=apply(P_Gma, 2, median)
#Plot
rabseq=seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000)
yy_gma=as.vector(t(P_Gma[1:100,]))
yy_mum=as.vector(t(P_Mum[1:100,]))
plot(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000), med_mum,type='n',ylim=c(0,3), xlab=NA , ylab=NA )
smoothScatter(rep(rabseq,100),yy_mum,xlim=c(min(dat$rabplot),max(dat$rabplot)),
ylim=c(min(dat$Ass),max(dat$Ass)),colramp = colorRampPalette(c(rgb(1,1,1,0.1), rgb(0,0,1,0.6)), alpha=TRUE),
nbin=200,transformation = function(x) x^.7,ylab='',xlab='',
cex=1.2,xaxt='n',yaxt='n',yaxs='r',nrpoints=0, add=TRUE)
smoothScatter(rep(rabseq,100),yy_gma,xlim=c(min(dat$rabplot),max(dat$rabplot)),
ylim=c(min(dat$Ass),max(dat$Ass)),colramp = colorRampPalette(c(rgb(1,1,1,0.1), rgb(1,0,0,0.6)), alpha=TRUE),
nbin=200,transformation = function(x) x^.7,ylab='',xlab='',
cex=1.2,xaxt='n',yaxt='n',yaxs='r',nrpoints=0, add=TRUE)
lines(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000),med_gma ,col="red")
lines(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000),mean_mum ,col="blue")
lines(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000),med_mum ,col="blue")
mtext(side=1,line=2.5,cex=1.1,text="Relatedness to the natal female")
mtext(side=2,line=2.5,cex=1.1,text="Male-female association index")
plot(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000), med_mum,type='n',ylim=c(0,3), xlab=NA , ylab=NA )
smoothScatter(rep(rabseq,100),yy_mum,xlim=c(min(dat$rabplot),max(dat$rabplot)),
ylim=c(min(dat$Ass),max(dat$Ass)),colramp = colorRampPalette(c(rgb(1,1,1,0.2), rgb(0,0,1,0.6)), alpha=TRUE),
nbin=200,transformation = function(x) x^.7,ylab='',xlab='',
cex=1.2,xaxt='n',yaxt='n',yaxs='r',nrpoints=0, add=TRUE)
smoothScatter(rep(rabseq,100),yy_gma,xlim=c(min(dat$rabplot),max(dat$rabplot)),
ylim=c(min(dat$Ass),max(dat$Ass)),colramp = colorRampPalette(c(rgb(1,1,1,0.2), rgb(1,0,0,0.6)), alpha=TRUE),
nbin=200,transformation = function(x) x^.7,ylab='',xlab='',
cex=1.2,xaxt='n',yaxt='n',yaxs='r',nrpoints=0, add=TRUE)
lines(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000),med_gma ,col="red")
lines(seq(from=min(dat$rabplot), to=max(dat$rabplot), length.out=1000),med_mum ,col="blue")
mtext(side=1,line=2.5,cex=1.1,text="Relatedness to the natal female")
mtext(side=2,line=2.5,cex=1.1,text="Male-female association index")
legend(x=0,y=3.2, legend = c("Pre-reproductive\n(Association to natal female's mother)", "Reproductive\n(Association to natal female)"),
col=c(col.alpha("red", 1) ,col.alpha("blue", 1)) ,
pch=c(15,15),
pt.cex=c(3,3) , bty="n", y.intersp=2,x.intersp=0.2, lty=c(0,0,0,0) ,cex=1, lwd=c(1,1))
#Extract model predictions
rel=seq(from=min(dat$rab), to=max(dat$rab), length.out=3)
rel * attr(dat$rab, 'scaled:scale') + attr(dat$rab, 'scaled:center') #converts scaled relatedness back to actual values
pred_gl=data.frame(rab=rel[1], #Low relatedness pre-reproductive (natal female's mother's associations)
Focal=0,
ida_index=1 ,
idb_index=1 ,
off_id=1)
pred_gh=data.frame(rab=rel[3], #Medium relatedness, pre-reproductive (natal female's mother's associations)
Focal=0,
ida_index=1 ,
idb_index=1 ,
off_id=1)
pred_gm=data.frame(rab=rel[2], #High relatedness, pre-reproductive (natal female's mother's associations)
Focal=0,
ida_index=1 ,
idb_index=1 ,
off_id=1)
pred_ml=data.frame(rab=rel[1], #Low relatedness, reproductive (natal female's associations)
Focal=1,
ida_index=1 ,
idb_index=1 ,
off_id=1)
pred_mh=data.frame(rab=rel[3], #Medium relatedness, reproductive (natal female's associations)
Focal=1,
ida_index=1 ,
idb_index=1 ,
off_id=1)
pred_mm=data.frame(rab=rel[2], #High relatedness, reproductive (natal female's associations)
Focal=1,
ida_index=1 ,
idb_index=1 ,
off_id=1)
link_gl=link(Assc, data=pred_gl, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_gh=link(Assc, data=pred_gh, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_gm=link(Assc, data=pred_gm, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_ml=link(Assc, data=pred_ml, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_mh=link(Assc, data=pred_mh, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
link_mm=link(Assc, data=pred_mm, n=1000, replace=list(alphaP_off=of_id, bP_R_off=of_id, bP_F_off=of_id, bP_RF_off=of_id,
alphaP_id=a_id, bP_R_id=a_id, bP_F_id=a_id, bP_RF_id=a_id,
alphaM_off=of_id, bM_R_off=of_id, bM_F_off=of_id, bM_RF_off=of_id,
alphaM_id=a_id, bM_R_id=a_id, bM_F_id=a_id, bM_RF_id=a_id))
P_gl <- (1-link_gl$p)*link_gl$mu
P_gm <- (1-link_gm$p)*link_gm$mu
P_gh <- (1-link_gh$p)*link_gh$mu
P_ml <- (1-link_ml$p)*link_ml$mu
P_mm <- (1-link_mm$p)*link_mm$mu
P_mh <- (1-link_mh$p)*link_mh$mu
#Plot
plot(x=rep(c(1,2),times=3),
y=c(median(P_gl),
median(P_ml),
median(P_gm),
median(P_mm),
median(P_gh),
median(P_mh)
),
xlim=c(0.8,2.2),ylim=c(0.5,2.1),xaxt='n',ylab="Male-female association index",xlab=NA,cex=2, pch=16,col=c(2,2,3,3,4,4)
)
legend("topright", col=c(4,3,2),legend=c("high", "medium","low"),lwd=2,title="Relatedness", border=NULL)
segments(1,median(P_gl),2,median(P_ml),lwd=2,col=2)
segments(1,median(P_gm),2,median(P_mm),lwd=2,col=3)
segments(1,median(P_gh),2,median(P_mh),lwd=2,col=4)
axis(side=1,at=c(1,2),label=FALSE)
axis(side=1,at=c(1,2),label=c("Pre-reproductive\n(Association to\nnatal female's mother)","Reproductive\n(Association to\nnatal female)"), line=1.5, tick=FALSE)
setwd("~/Dropbox/ChimpPoop/MenoInbreeding/Inbreeding")
rm(list = ls())
#Anonymize Relatedness validatoin model input
pairs=fread("./RelatednessEstimates_Validation/GeneticR_NGSRelate_AvDepth4x.tsv")
pairs=copy(pairs[!is.na(MultiCat)])
trot=fread("../../A_DataSheets/Anon_Key.csv")
pairs[,c("ida", "idb", "rab", "MuliteR")]
pairs[,c("ida", "idb", "rab", "MultieR")]
pairs=copy(pairs[,c("ida", "idb", "rab", "MultieR")])
uni=merge(pairs, trot, by.x="ida", by.y="ID")
colnames(uni)[5]
colnames(uni)[5]="idA"
uni=merge(uni, trot, by.x="idb", by.y="ID")
colnames(uni)[6]="idB"
colnames(uni)
form=uni[, c("rab", "MultieR", "idA", "idB")]
form
colnames(form)[1]
colnames(form)[1]="GeneticR"
colnames(form)[2]="PedigreeR"
write.csv(form, "./GitHub/Relatedness_Validation/RelatednessComparison_AllSNPS_SubsetMAF.csv", row.names=FALSE, quote=FALSE)
pairs=fread("./RelatednessEstimates_Validation/GeneticR_NGSRelate_AvDepth4x.tsv")
pairs=copy(pairs[!is.na(MultiCat)])
pairs=copy(pairs[,c("ida", "idb", "rab", "MultieR", "AvDepth.a", "AvDepth.b")])
trot=fread("../../A_DataSheets/Anon_Key.csv")
uni=merge(pairs, trot, by.x="ida", by.y="ID")
colnames(uni)[7]="idA"
uni=merge(uni, trot, by.x="idb", by.y="ID")
colnames(uni)[8]="idB"
form=uni[, c("rab", "MultieR", "idA", "idB", "AvDepth.a", "AvDepth.b")]
colnames(form)[1]="GeneticR"
colnames(form)[2]="PedigreeR"
write.csv(form, "./GitHub/Relatedness_Validation/RelatednessComparison_AllSNPS_SubsetMAF.csv", row.names=FALSE, quote=FALSE)
rm(list = ls())
#Anonymize Relatedness validation model input LDPrunedSNPS_SubsetMAF
pairs=fread("./RelatednessEstimates_Validation/GeneticR_NGSRelate_LDpruned_AvDepth4x.tsv")
pairs=copy(pairs[!is.na(MultiCat)])
pairs=copy(pairs[,c("ida", "idb", "rab", "MultieR", "AvDepth.a", "AvDepth.b")])
trot=fread("../../A_DataSheets/Anon_Key.csv")
uni=merge(pairs, trot, by.x="ida", by.y="ID")
colnames(uni)[7]="idA"
uni=merge(uni, trot, by.x="idb", by.y="ID")
colnames(uni)[8]="idB"
form=uni[, c("rab", "MultieR", "idA", "idB", "AvDepth.a", "AvDepth.b")]
colnames(form)[1]="GeneticR"
colnames(form)[2]="PedigreeR"
write.csv(form, "./GitHub/Relatedness_Validation/RelatednessComparison_LDPrunedSNPS_SubsetMAF.csv", row.names=FALSE, quote=FALSE)
rm(list = ls())
#Anonymize Relatedness validation model input (AllSNPS_AllIndsMAF)
pairs=fread("./RelatednessEstimates_Validation/GeneticR_NGSRelate_AllIndsFreq_AvDepth4x.tsv")
pairs=copy(pairs[!is.na(MultiCat)])
pairs=copy(pairs[,c("ida", "idb", "rab", "MultieR", "AvDepth.a", "AvDepth.b")])
trot=fread("../../A_DataSheets/Anon_Key.csv")
uni=merge(pairs, trot, by.x="ida", by.y="ID")
colnames(uni)[7]="idA"
uni=merge(uni, trot, by.x="idb", by.y="ID")
colnames(uni)[8]="idB"
form=uni[, c("rab", "MultieR", "idA", "idB", "AvDepth.a", "AvDepth.b")]
colnames(form)[1]="GeneticR"
colnames(form)[2]="PedigreeR"
write.csv(form, "./GitHub/Relatedness_Validation/RelatednessComparison_AllSNPS_AllIndsMAF.csv", row.names=FALSE, quote=FALSE)
rm(list = ls())
#Anonymize Relatedness validation model input (LDPrunedSNPS_AllIndsMAF)
pairs=fread("./RelatednessEstimates_Validation/GeneticR_NGSRelate_LDpruned_AllIndsFreq_AvDepth4x.tsv")
pairs=copy(pairs[!is.na(MultiCat)])
pairs=copy(pairs[,c("ida", "idb", "rab", "MultieR", "AvDepth.a", "AvDepth.b")])
trot=fread("../../A_DataSheets/Anon_Key.csv")
uni=merge(pairs, trot, by.x="ida", by.y="ID")
colnames(uni)[7]="idA"
uni=merge(uni, trot, by.x="idb", by.y="ID")
colnames(uni)[8]="idB"
form=uni[, c("rab", "MultieR", "idA", "idB", "AvDepth.a", "AvDepth.b")]
colnames(form)[1]="GeneticR"
colnames(form)[2]="PedigreeR"
write.csv(form, "./GitHub/Relatedness_Validation/RelatednessComparison_LDPrunedSNPS_AllIndsMAF.csv", row.names=FALSE, quote=FALSE)
setwd("~/Dropbox/ChimpPoop/MenoInbreeding/Inbreeding/GitHub/Relatedness_Validation")
rm(list=ls())
library(data.table)
library(ggplot2)
library(dplyr)
library(stringr)
library(ggpubr)
pairs=fread("RelatednessComparison_AllSNPS_SubsetMAF.csv")
pairsLD=fread("RelatednessComparison_LDPrunedSNPS_SubsetMAF.csv")
pairsAF=fread("RelatednessComparison_AllSNPS_AllIndsMAF.csv")
pairsLD_AF=fread("RelatednessComparison_LDPrunedSNPS_AllIndsMAF.csv")
fit1 <- lm(rab ~ MultieR, data = pairs)
fit1 <- lm(GeneticR ~ PedigreeR, data = pairs)
summary(fit1) #p<<0.001 AdjustedR^2=0.95.8
fit2 <- lm(GeneticR ~ PedigreeR, data = pairsLD)
summary(fit2) #pvalue=<<0.001 adjusted R^2=0.95.6
fit3 <- lm(GeneticR ~ PedigreeR, data = pairsAF)
summary(fit3)
pairsLDAF=fread("RelatednessComparison_LDPrunedSNPS_AllIndsMAF.csv")
rm(list=ls())
pairs=fread("RelatednessComparison_AllSNPS_SubsetMAF.csv")
pairsLD=fread("RelatednessComparison_LDPrunedSNPS_SubsetMAF.csv")
pairsAF=fread("RelatednessComparison_AllSNPS_AllIndsMAF.csv")
pairsLDAF=fread("RelatednessComparison_LDPrunedSNPS_AllIndsMAF.csv")
fit4 <- lm(GeneticR ~ PedigreeR, data = pairsLDAF)
summary(fit4)
fit1 <- lm(GeneticR ~ PedigreeR, data = pairs)
summary(fit1) #p<<0.001 AdjustedR^2=0.95.8
fit2 <- lm(GeneticR ~ PedigreeR, data = pairsLD)
summary(fit2) #pvalue=<<0.001 adjusted R^2=0.95.6
fit3 <- lm(GeneticR ~ PedigreeR, data = pairsAF)
summary(fit3) #pvalue=<<0.001 adjusted R^2=0.95.6
#Compare depth of coverage cutoffs
fitq1 <- lm(GeneticR ~ PedigreeR, data = pairs)
summary(fitq1)
summary(fit4)
summary(fitq1)
fitq2 <- lm(eneticR ~ PedigreeR, data = pairs[AvDepth.a>=8 & AvDepth.b>=8])
summary(fitq2)
fitq2 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=8 & AvDepth.b>=8])
summary(fitq2)
fitq2 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=8 & AvDepth.b>=8])
summary(fitq2) #pvalue=<<0.001 adjusted R^2=0.95.6
fitq3 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=12 & AvDepth.b>=12])
summary(fitq3) #pvalue=<<0.001 adjusted R^2=0.95.6
summary(fitq2) #pvalue=<<0.001 adjusted R^2=0.95.6
fitq4 <- lm(GeneticR ~ PedigreeR, data = pairs[AvDepth.a>=16 & AvDepth.b>=16])
summary(fitq4) #pvalue=<<0.001 adjusted R^2=0.95.6
summary(fit4) #pvalue=<<0.001 adjusted R^2=0.95.6
#Plot comparisons of SNP set and different MAF calclations
#red line is 1:1, blue line is linear regression/correlation. adjusted R^2=0.9577
p1=ggplot(pairs, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Entire SNP set\nMAF calculated from subset", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p2=ggplot(pairsLD, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="LD pruned SNP set\nMAF calculated from subset", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p3=ggplot(pairsAF, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="Entire SNP set\nMAF calculated from entire sample", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
p4=ggplot(pairsLDAF, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
annotate("text", label="LD pruned SNP set\nMAF calculated from entire sample", hjust=0, x=0.02, y=0.58, size=5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
ggarrange(p1, p2, p3, p4)
ggarrange(p1, p2, p3, p4)
q1=ggplot(pairs, aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Average Depth of Coverage >4x", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
q2=ggplot(pairs[AvDepth.a>=8 & AvDepth.b>=8], aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Average Depth of Coverage >8x", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
q3=ggplot(pairs[AvDepth.a>=12 & AvDepth.b>=12], aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Average Depth of Coverage >12x", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
q4=ggplot(pairs[AvDepth.a>=16 & AvDepth.b>=16], aes(x=PedigreeR, y=GeneticR)) + geom_jitter(alpha=0.5) +
geom_abline(slope=1, intercept=0, col="red", lwd=1) +
annotate("text", label="Average Depth of Coverage >16x", hjust=0, x=0.02, y=0.58, size=5) +
stat_smooth(method="lm") + scale_y_continuous(limits=c(0.0, 0.6)) +
xlab("Pedigree R") + ylab("Genetic R") + labs(col="Dyad\nCategory") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
panel.background = element_blank(),
axis.line = element_line(colour="black"),
panel.grid.major = element_line(colour="#f0f0f0"),
axis.text.y = element_text(size=15),
axis.text.x = element_text(size=15),
axis.title = element_text(size=15),
legend.text = element_text(size=15),
legend.title = element_text(size=15))
ggarrange(q1, q2, q3, q4)
#Sample sizes
nrow(pairs)
nrow(pairs[AvDepth.a>=8 & AvDepth.b>=8])
nrow(pairs[AvDepth.a>=12 & AvDepth.b>=12])
nrow(pairs[AvDepth.a>=16 & AvDepth.b>=16])
